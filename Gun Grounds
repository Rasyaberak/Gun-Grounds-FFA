local distance = Value3
local height = Value2
local speed = Value1
-- made By Projeto LKB scriptblox.com --

loadstring(game:HttpGet(("https://raw.githubusercontent.com/REDzHUB/LibraryV2/main/redzLib")))()
local l = loadstring(game:HttpGet("https://raw.githubusercontent.com/laagginq/ui-libraries/main/dxhooknotify/src.lua", true))()

MakeWindow({
  Hub = {
    Title =  "[FPS] Gun Grounds FFA",
    Animation = "By RasyX"
  },
  Key = {
    KeySystem = false,
    Title = "Key System",
    Description = "[FPS] Gun Grounds FFA",
    KeyLink = "https://raw.githubusercontent.com/dqtixz/key-system-mdfgbgk-dwflgk-nerrnmtr/main/ryj11374973493528790352797537297%20246949%2054795ergjternbrt%20j",
    Keys = {"keyjgfeihefnm22","Projeto"},
    Notifi = {
      Notifications = true,
      CorrectKey = "Running the Script...",
      Incorrectkey = "The key is incorrect",
      CopyKeyLink = "Copied to Clipboard"
    }
  }
})

-- Initialize the loading tab and label
local CheckLoading = MakeTab({Name = "Loading Status"})
local LabelLoading = AddTextLabel(CheckLoading, "Initializing...")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to update the label with a loading sequence
local function UpdateLabel(text, duration)
    LabelLoading.Text = text
    wait(duration)
end

-- Function to verify user and player information
local function VerifyUser()
    if LocalPlayer and LocalPlayer.UserId then
        if LocalPlayer.Name and LocalPlayer.Name ~= "" then
            return true
        end
    end
    return false
end

-- Loading sequence
local function LoadingSequence()
    local messages = {
        "Verifying User... üîé",
        "Verifying Player Info... üë§",
        "Initializing Script... ‚è≥"
    }

    for i, message in ipairs(messages) do
        UpdateLabel(message, 1)
        if i < #messages then
            UpdateLabel(message .. " | Progress: " .. i .. "/" .. #messages, 0.5)
        end
    end

    if VerifyUser() then
        UpdateLabel("User Verified Successfully!", 1)
        UpdateLabel("Welcome, " .. LocalPlayer.Name .. "!", 1)
    else
        UpdateLabel("User Verification Failed!", 2)
        return
    end

    UpdateLabel("All systems go! üöÄ", 1)
end

LoadingSequence()
wait(1)

-- Logs Tab
local MainLogs = MakeTab({Name = "Logs"})
AddParagraph(MainLogs, {"Made By RasyX"})
AddParagraph(MainLogs, {"[ FEATURES ] AimBot ( NEW ),"})
AddParagraph(MainLogs, {"21/09/2024", "Version 0.0.1"})
wait(1)
AddParagraph(MainLogs, {"There will probably be a script update, coming soon!! üëΩ"})
wait(1)

local Main = MakeTab({Name = "Main"})
wait(1)

-- Function to handle aiming with animation and auto-shoot (Mobile Compatible)
local function aimAndShoot(config)
    _G.config = config

    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local targetPlayer = nil

    -- Smooth aim function with animation
    local function smoothAim(targetPos, currentPos)
        local smoothSpeed = config.Smoothness
        return currentPos:Lerp(targetPos, smoothSpeed)
    end

    -- Visual feedback for hits and misses
    local function visualFeedback(target, isHit)
        if target and target.Character and target.Character:FindFirstChild(config.TargetPart) then
            local part = target.Character[config.TargetPart]
            if isHit then
                part.BrickColor = BrickColor.new("Bright green") -- Color for hit
                wait(0.1)
                part.BrickColor = BrickColor.new("White") -- Revert color after a short delay
            else
                part.BrickColor = BrickColor.new("Bright red") -- Color for miss
                wait(0.1)
                part.BrickColor = BrickColor.new("White") -- Revert color after a short delay
            end
        end
    end

    -- Silent aim: Modifies the camera position without visibly moving it
    local function silentAim(targetPos)
        local oldPos = camera.CFrame
        camera.CFrame = CFrame.new(camera.CFrame.Position, targetPos)
        return oldPos
    end

    -- Aim prediction function for moving targets
    local function predictTarget(target)
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local targetPos = target.Character.HumanoidRootPart.Position
            local targetVelocity = target.Character.HumanoidRootPart.Velocity
            local predictionTime = 0.1 -- Time to predict ahead
            local predictedPos = targetPos + (targetVelocity * predictionTime)
            return predictedPos
        end
        return nil
    end

    -- Auto-shoot function (for mobile)
    local function autoShoot(target)
        if target then
            local humanoid = target.Parent:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                humanoid:TakeDamage(10)  -- Example of dealing damage directly
                visualFeedback(target, true) -- Indicate hit
            else
                visualFeedback(target, false) -- Indicate miss
            end
        end
    end

    -- Line of Sight check function (70. Line of Sight)
    local function checkLineOfSight(target)
        local ray = Ray.new(camera.CFrame.Position, (target.Position - camera.CFrame.Position).unit * 500)
        local hit, position = game.Workspace:FindPartOnRay(ray, player.Character, false, true)
        return hit == target
    end

    -- Auto target nearest player (83. Auto Target)
    local function findNearestTarget()
        local closestDistance = math.huge
        local closestPlayer = nil

        for _, playerInstance in pairs(game.Players:GetPlayers()) do
            if playerInstance ~= player and playerInstance.Character and playerInstance.Character:FindFirstChild(config.TargetPart) then
                local targetPos = playerInstance.Character[config.TargetPart].Position
                local distance = (targetPos - player.Character.Head.Position).magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = playerInstance
                end
            end
        end
        return closestPlayer
    end

    -- Dynamic FOV Adjustment (180 degrees)
    local function adjustFOV()
        camera.FieldOfView = 180
    end

    -- Main aim loop
    while true do
        adjustFOV()  -- Adjust FOV dynamically

        targetPlayer = findNearestTarget() -- (83. Auto Target)

        if targetPlayer and checkLineOfSight(targetPlayer.Character[config.TargetPart]) then  -- (70. Line of Sight)
            -- Predict target position
            local predictedPos = predictTarget(targetPlayer)

            -- Smooth aim towards the predicted target position (71. Aiming Assistant)
            local aimPos = smoothAim(predictedPos, camera.CFrame.Position)

            -- Silent aim: Temporarily set camera position to aim
            local oldPos = silentAim(aimPos)

            -- Auto-shoot and highlight target (31. Target Highlight)
            autoShoot(targetPlayer.Character[config.TargetPart])

            -- Restore camera position
            camera.CFrame = oldPos
        end

        wait(0.01) -- Add a short delay for optimization
    end
end

-- Button for AimBot (Mobile Compatible)
AddButton(Main, {
  Name = "AimBot",
  Callback = function()
    local config = {
        Fov = 360,
        MaxTransparency = 0.1,
        Smoothness = 0.1, -- Increase for smoother animation (71. Aiming Assistant)
        TargetPart = "Head",
        TeamCheck = false,
        WallCheck = true, -- (32. Wall Hack)
        MaxDistanceEnabled = false,
        MaxDistance = 1500,
        FovColor = Color3.fromRGB(102, 45, 145)
    }

    -- Wall Hack logic (32. Wall Hack)
    if config.WallCheck then
        config.IgnoreWalls = true
    end
     wait(0.1)
        l:Notify("Script Load!", "AimBot", 3)

    -- Call the aim and shoot function with the enhanced aim precision (90. Aim Master)
    aimAndShoot(config)
  end
})


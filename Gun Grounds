local distance = Value3
local height = Value2
local speed = Value1
-- made By Projeto LKB scriptblox.com --

loadstring(game:HttpGet(("https://raw.githubusercontent.com/REDzHUB/LibraryV2/main/redzLib")))()
local l = loadstring(game:HttpGet("https://raw.githubusercontent.com/laagginq/ui-libraries/main/dxhooknotify/src.lua", true))()

MakeWindow({
  Hub = {
    Title =  "[FPS] Gun Grounds FFA",
    Animation = "By RasyX"
  },
  Key = {
    KeySystem = false,
    Title = "Key System",
    Description = "[FPS] Gun Grounds FFA",
    KeyLink = "https://raw.githubusercontent.com/dqtixz/key-system-mdfgbgk-dwflgk-nerrnmtr/main/ryj11374973493528790352797537297%20246949%2054795ergjternbrt%20j",
    Keys = {"keyjgfeihefnm22","Projeto"},
    Notifi = {
      Notifications = true,
      CorrectKey = "Running the Script...",
      Incorrectkey = "The key is incorrect",
      CopyKeyLink = "Copied to Clipboard"
    }
  }
})

-- Initialize the loading tab and label
local CheckLoading = MakeTab({Name = "Loading Status"})
local LabelLoading = AddTextLabel(CheckLoading, "Initializing...")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to update the label with a loading sequence
local function UpdateLabel(text, duration)
    LabelLoading.Text = text
    wait(duration)
end

-- Function to verify user and player information
local function VerifyUser()
    if LocalPlayer and LocalPlayer.UserId then
        if LocalPlayer.Name and LocalPlayer.Name ~= "" then
            return true
        end
    end
    return false
end

-- Loading sequence
local function LoadingSequence()
    local messages = {
        "Verifying User... üîé",
        "Verifying Player Info... üë§",
        "Initializing Script... ‚è≥"
    }

    for i, message in ipairs(messages) do
        UpdateLabel(message, 1)
        if i < #messages then
            UpdateLabel(message .. " | Progress: " .. i .. "/" .. #messages, 0.5)
        end
    end

    if VerifyUser() then
        UpdateLabel("User Verified Successfully!", 1)
        UpdateLabel("Welcome, " .. LocalPlayer.Name .. "!", 1)
    else
        UpdateLabel("User Verification Failed!", 2)
        return
    end

    UpdateLabel("All systems go! üöÄ", 1)
end

LoadingSequence()
wait(1)

-- Logs Tab
local MainLogs = MakeTab({Name = "Logs"})
AddParagraph(MainLogs, {"Made By RasyX"})
AddParagraph(MainLogs, {"[ FEATURES ] AimBot, ESP ( NEW ),"})
AddParagraph(MainLogs, {"25/09/2024", "Version 0.0.8"})
wait(1)
AddParagraph(MainLogs, {"There will probably be a script update, coming soon!! üëΩ"})
wait(1)

local Main = MakeTab({Name = "Main"})
wait(1)

local function aimAndShoot(config)
    _G.config = config

    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local targetPlayer = nil

    -- Prediction for moving targets
    local function predictPosition(target)
        local targetPart = target.Character[config.TargetPart]
        local targetVelocity = target.Character.HumanoidRootPart.Velocity
        local predictionTime = (targetPart.Position - camera.CFrame.Position).magnitude / config.ProjectileSpeed
        return targetPart.Position + targetVelocity * predictionTime
    end

    -- Check if the target is visible (considering walls)
    local function isTargetVisible(target)
        local targetPosition = target.Character[config.TargetPart].Position
        local ray = Ray.new(camera.CFrame.Position, (targetPosition - camera.CFrame.Position).unit * 100)
        local hit, position = game.Workspace:FindPartOnRay(ray, player.Character)

        return hit == nil or hit:IsDescendantOf(target.Character)
    end

    -- Aim assist for smoother aiming towards target
    local function aimAssist(targetPos, currentPos)
        local aimStrength = config.AimAssistStrength
        return currentPos:Lerp(targetPos, aimStrength)
    end

    -- Auto-shoot function with delay for more human-like behavior
    local function autoShoot(target)
        if target then
            local humanoid = target.Parent:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                humanoid:TakeDamage(50) -- Adjust damage to appear less aggressive
                wait(math.random(0.1, 0.3)) -- Random delay between shots
            end
        end
    end

    -- Main function to get the closest valid target
    local function getClosestTarget()
        local closestTarget = nil
        local shortestDistance = math.huge

        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild(config.TargetPart) then
                local targetPos = otherPlayer.Character[config.TargetPart].Position
                local distance = (targetPos - player.Character.Head.Position).magnitude

                -- Check if the target is on the enemy team
                local isEnemy = config.TeamCheck and otherPlayer.Team ~= player.Team

                if distance < shortestDistance and (not config.TeamCheck or isEnemy) then
                    shortestDistance = distance
                    closestTarget = otherPlayer
                end
            end
        end

        return closestTarget
    end

    -- Main loop for aiming and shooting
    while true do
        local closestTarget = getClosestTarget()

        if closestTarget and closestTarget.Character and closestTarget.Character:FindFirstChild(config.TargetPart) then
            if isTargetVisible(closestTarget) then -- Check visibility
                local predictedPosition = predictPosition(closestTarget)
                local aimPos = aimAssist(predictedPosition, camera.CFrame.Position) -- Aim assist
                camera.CFrame = CFrame.new(camera.CFrame.Position, aimPos) -- Adjust camera to aim at predicted position
                autoShoot(closestTarget.Character[config.TargetPart]) -- Auto-shoot when aim is locked
            end
        end

        wait(0.05) -- Short delay for optimization
    end
end

-- Button for AimBot (Mobile Compatible)
AddButton(Main, {
    Name = "AimBot",
    Callback = function()
        local config = {
            Fov = 180,
            MaxTransparency = 0.1,
            Smoothness = 0.1,
            AimAssistStrength = 0.3, -- Lower aim assist strength for more human-like movement
            TargetPart = "UpperTorso", -- Set to "UpperTorso" to target the body
            TeamCheck = true, -- Enable team check
            WallCheck = true,
            MaxDistanceEnabled = false,
            MaxDistance = 1500,
            FovColor = Color3.fromRGB(102, 45, 145),
            ProjectileSpeed = 1000 -- Projectile speed for prediction
        }

        loadstring(game:HttpGet("https://raw.githubusercontent.com/dqtixz/aimbot/main/Projeto%20LKA%20x%20F%20Hub", true))()
        wait(0.1)
        l:Notify("Script Loaded!", "AimBot", 3)

        aimAndShoot(config) -- Call the aim and shoot function with the configuration
    end
})

-- ESP Player
AddButton(Main, {
    Name = "Esp",
    Callback = function()

        -- ESP HIGHLIGHT 
        local DepthMode = "AlwaysOnTop"
        local FillTransparency = 0.5
        local OutlineColor = Color3.fromRGB(255, 255, 255)
        local OutlineTransparency = 0

        local CoreGui = game:GetService("CoreGui")
        local Players = game:GetService("Players")
        local lp = Players.LocalPlayer
        local connections = {}

        local Storage = Instance.new("Folder")
        Storage.Parent = CoreGui
        Storage.Name = "Highlight_Storage"

        local function UpdateHighlightColor(Highlight, distance, isOwnTeam)
            if isOwnTeam then
                Highlight.FillColor = Color3.fromRGB(0, 150, 255) -- Brighter Blue for own team
            else
                if distance < 20 then
                    Highlight.FillColor = Color3.fromRGB(200, 255, 200) -- Brighter Green for very close
                elseif distance < 50 then
                    Highlight.FillColor = Color3.fromRGB(255, 255, 100) -- Brighter Orange for somewhat close
                else
                    Highlight.FillColor = Color3.fromRGB(255, 150, 150) -- Brighter Red for far away
                end
            end
        end

        local function Highlight(plr)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = plr.Name
            Highlight.DepthMode = DepthMode
            Highlight.FillTransparency = FillTransparency
            Highlight.OutlineColor = OutlineColor
            Highlight.OutlineTransparency = OutlineTransparency
            Highlight.Parent = Storage

            local function UpdateAdornee(char)
                if char then
                    Highlight.Adornee = char
                else
                    Highlight.Adornee = nil -- Clear Adornee if character does not exist
                end
            end

            -- Set the initial Adornee to the player's character
            UpdateAdornee(plr.Character)

            -- Update Adornee when the player's character respawns
            connections[plr] = plr.CharacterAdded:Connect(function(char)
                UpdateAdornee(char)
            end)

            -- Constantly update the color based on distance
            local distanceConnection
            distanceConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if plr and plr.Character and lp and lp.Character then
                    local distance = (lp.Character.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                    local isOwnTeam = (plr.Team == lp.Team) -- Check if the player is on the same team
                    UpdateHighlightColor(Highlight, distance, isOwnTeam)
                end
            end)

            -- Store connection so it can be cleaned up later
            connections[plr] = {characterConnection = connections[plr], distanceConnection = distanceConnection}
        end

        local function CheckTeamHighlight(plr)
            Highlight(plr) -- Highlight all players, the color will be set based on team
        end

        Players.PlayerAdded:Connect(function(plr)
            plr.CharacterAdded:Wait() -- Wait for the character to be added
            CheckTeamHighlight(plr) -- Highlight player based on team
        end)

        -- Initialize highlights for existing players
        for _, plr in next, Players:GetPlayers() do
            CheckTeamHighlight(plr) -- Check existing players on team
        end

        Players.PlayerRemoving:Connect(function(plr)
            if Storage:FindFirstChild(plr.Name) then
                Storage[plr.Name]:Destroy()
            end
            if connections[plr] then
                -- Disconnect both CharacterAdded and distance updates
                if connections[plr].characterConnection then
                    connections[plr].characterConnection:Disconnect()
                end
                if connections[plr].distanceConnection then
                    connections[plr].distanceConnection:Disconnect()
                end
                connections[plr] = nil
            end
        end)

local Settings = {
    Box_Color = Color3.fromRGB(255, 0, 0),
    Box_Thickness = 2,
    Team_Check = false,
    Team_Color = false,
    Autothickness = true
}

--Locals
local Space = game:GetService("Workspace")
local Player = game:GetService("Players").LocalPlayer
local Camera = Space.CurrentCamera

-- Locals
local function NewLine(color, thickness)
    local line = Drawing.new("Line")
    line.Visible = false
    line.From = Vector2.new(0, 0)
    line.To = Vector2.new(0, 0)
    line.Color = color
    line.Thickness = thickness
    line.Transparency = 1
    return line
end

local function Vis(lib, state)
    for i, v in pairs(lib) do
        v.Visible = state
    end
end

local function Colorize(lib, color)
    for i, v in pairs(lib) do
        v.Color = color
    end
end

local Black = Color3.fromRGB(0, 0, 0)

local function Rainbow(lib, delay)
    for hue = 0, 1, 1/30 do
        local color = Color3.fromHSV(hue, 0.6, 1)
        Colorize(lib, color)
        wait(delay)
    end
    Rainbow(lib)
end
--Main Draw Function
local function Main(plr)
    repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
    local R15
    if plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
        R15 = true
    else 
        R15 = false
    end
    local Library = {
        TL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
        TL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

        TR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
        TR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

        BL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
        BL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),

        BR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
        BR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness)
    }
    coroutine.wrap(Rainbow)(Library, 0.15)
    local oripart = Instance.new("Part")
    oripart.Parent = Space
    oripart.Transparency = 1
    oripart.CanCollide = false
    oripart.Size = Vector3.new(1, 1, 1)
    oripart.Position = Vector3.new(0, 0, 0)
    --Updater Loop
    local function Updater()
        local c 
        c = game:GetService("RunService").RenderStepped:Connect(function()
            if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                local Hum = plr.Character
                local HumPos, vis = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position)
                if vis then
                    oripart.Size = Vector3.new(Hum.HumanoidRootPart.Size.X, Hum.HumanoidRootPart.Size.Y*1.5, Hum.HumanoidRootPart.Size.Z)
                    oripart.CFrame = CFrame.new(Hum.HumanoidRootPart.CFrame.Position, Camera.CFrame.Position)
                    local SizeX = oripart.Size.X
                    local SizeY = oripart.Size.Y
                    local TL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, SizeY, 0)).p)
                    local TR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, SizeY, 0)).p)
                    local BL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, -SizeY, 0)).p)
                    local BR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, -SizeY, 0)).p)

                    if Settings.Team_Check then
                        if plr.TeamColor == Player.TeamColor then
                            Colorize(Library, Color3.fromRGB(0, 255, 0))
                        else 
                            Colorize(Library, Color3.fromRGB(255, 0, 0))
                        end
                    end

                    if Settings.Team_Color then
                        Colorize(Library, plr.TeamColor.Color)
                    end

                    local ratio = (Camera.CFrame.p - Hum.HumanoidRootPart.Position).magnitude
                    local offset = math.clamp(1/ratio*750, 2, 300)

                    Library.TL1.From = Vector2.new(TL.X, TL.Y)
                    Library.TL1.To = Vector2.new(TL.X + offset, TL.Y)
                    Library.TL2.From = Vector2.new(TL.X, TL.Y)
                    Library.TL2.To = Vector2.new(TL.X, TL.Y + offset)

                    Library.TR1.From = Vector2.new(TR.X, TR.Y)
                    Library.TR1.To = Vector2.new(TR.X - offset, TR.Y)
                    Library.TR2.From = Vector2.new(TR.X, TR.Y)
                    Library.TR2.To = Vector2.new(TR.X, TR.Y + offset)

                    Library.BL1.From = Vector2.new(BL.X, BL.Y)
                    Library.BL1.To = Vector2.new(BL.X + offset, BL.Y)
                    Library.BL2.From = Vector2.new(BL.X, BL.Y)
                    Library.BL2.To = Vector2.new(BL.X, BL.Y - offset)

                    Library.BR1.From = Vector2.new(BR.X, BR.Y)
                    Library.BR1.To = Vector2.new(BR.X - offset, BR.Y)
                    Library.BR2.From = Vector2.new(BR.X, BR.Y)
                    Library.BR2.To = Vector2.new(BR.X, BR.Y - offset)

                    Vis(Library, true)

                    if Settings.Autothickness then
                        local distance = (Player.Character.HumanoidRootPart.Position - oripart.Position).magnitude
                        local value = math.clamp(1/distance*100, 1, 4) --0.1 is min thickness, 6 is max
                        for u, x in pairs(Library) do
                            x.Thickness = value
                        end
                    else 
                        for u, x in pairs(Library) do
                            x.Thickness = Settings.Box_Thickness
                        end
                    end
                else 
                    Vis(Library, false)
                end
            else 
                Vis(Library, false)
                if game:GetService("Players"):FindFirstChild(plr.Name) == nil then
                    for i, v in pairs(Library) do
                        v:Remove()
                        oripart:Destroy()
                    end
                    c:Disconnect()
                end
            end
        end)
    end
    coroutine.wrap(Updater)()
end

-- Draw Boxes
for i, v in pairs(game:GetService("Players"):GetPlayers()) do
    if v.Name ~= Player.Name then
      coroutine.wrap(Main)(v)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(newplr)
    coroutine.wrap(Main)(newplr)
end)
wait(0.1)

        l:Notify("Visual Script Loaded!", "ESP üëΩ", 3)
    end
})

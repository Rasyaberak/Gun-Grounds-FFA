local distance = Value3
local height = Value2
local speed = Value1
-- made By Projeto LKB scriptblox.com --

loadstring(game:HttpGet(("https://raw.githubusercontent.com/REDzHUB/LibraryV2/main/redzLib")))()
local l = loadstring(game:HttpGet("https://raw.githubusercontent.com/laagginq/ui-libraries/main/dxhooknotify/src.lua", true))()

MakeWindow({
  Hub = {
    Title =  "[FPS] Gun Grounds FFA",
    Animation = "By RasyX"
  },
  Key = {
    KeySystem = false,
    Title = "Key System",
    Description = "[FPS] Gun Grounds FFA",
    KeyLink = "https://raw.githubusercontent.com/dqtixz/key-system-mdfgbgk-dwflgk-nerrnmtr/main/ryj11374973493528790352797537297%20246949%2054795ergjternbrt%20j",
    Keys = {"keyjgfeihefnm22","Projeto"},
    Notifi = {
      Notifications = true,
      CorrectKey = "Running the Script...",
      Incorrectkey = "The key is incorrect",
      CopyKeyLink = "Copied to Clipboard"
    }
  }
})

-- Initialize the loading tab and label
local CheckLoading = MakeTab({Name = "Loading Status"})
local LabelLoading = AddTextLabel(CheckLoading, "Initializing...")

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to update the label with a loading sequence
local function UpdateLabel(text, duration)
    LabelLoading.Text = text
    wait(duration)
end

-- Function to verify user and player information
local function VerifyUser()
    if LocalPlayer and LocalPlayer.UserId then
        if LocalPlayer.Name and LocalPlayer.Name ~= "" then
            return true
        end
    end
    return false
end

-- Loading sequence
local function LoadingSequence()
    local messages = {
        "Verifying User... üîé",
        "Verifying Player Info... üë§",
        "Initializing Script... ‚è≥"
    }

    for i, message in ipairs(messages) do
        UpdateLabel(message, 1)
        if i < #messages then
            UpdateLabel(message .. " | Progress: " .. i .. "/" .. #messages, 0.5)
        end
    end

    if VerifyUser() then
        UpdateLabel("User Verified Successfully!", 1)
        UpdateLabel("Welcome, " .. LocalPlayer.Name .. "!", 1)
    else
        UpdateLabel("User Verification Failed!", 2)
        return
    end

    UpdateLabel("All systems go! üöÄ", 1)
end

LoadingSequence()
wait(1)

-- Function to animate the button
local TweenService = game:GetService("TweenService")

local function animateButton(button, goalSize, goalColor)
    local tween = TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Size = goalSize,
        BackgroundColor3 = goalColor
    })
    tween:Play()
    tween.Completed:Wait()
end

-- AimBot Toggle
local aimBotEnabled = false
local lastNotificationTime = 0

local MainAim = MakeTab({Name = "Aim (Head)"})

local aimBotButton = AddButton(MainAim, {
    Name = "AimBot OFF",
    Callback = function()
        aimBotEnabled = not aimBotEnabled

        if aimBotEnabled then
            aimBotButton.Name = "AimBot ON"
            local goalSize = UDim2.new(1.1, 0, 1.1, 0)
            local goalColor = Color3.fromRGB(0, 255, 0)

            animateButton(aimBotButton, goalSize, goalColor)

            local config = {
                Fov = 180,
                MaxTransparency = 0.1,
                Smoothness = 0.1,
                TargetPart = "Head",
                TeamCheck = false,
                WallCheck = true,
                MaxDistanceEnabled = false,
                MaxDistance = 1500,
                FovColor = Color3.fromRGB(102, 45, 145)
            }

            aimAndShoot(config)

            if tick() - lastNotificationTime > 5 then
                l:Notify("AimBot Enabled!", "", 3)
                lastNotificationTime = tick()
            end
        else
            aimBotButton.Name = "AimBot OFF"
            local goalSize = UDim2.new(1, 0, 1, 0)
            local goalColor = Color3.fromRGB(255, 0, 0)

            animateButton(aimBotButton, goalSize, goalColor)

            if tick() - lastNotificationTime > 5 then
                l:Notify("AimBot Disabled!", "", 3)
                lastNotificationTime = tick()
            end
        end
    end
})

-- Function to handle aiming with animation and auto-shoot (Mobile Compatible)
local function aimAndShoot(config)
    _G.config = config

    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local targetPlayer = nil

    local function smoothAim(targetPos, currentPos)
        local smoothSpeed = config.Smoothness
        return currentPos:Lerp(targetPos, smoothSpeed)
    end

    local function autoShoot(target)
        if target then
            local humanoid = target.Parent:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                humanoid:TakeDamage(10)
            end
        end
    end

    local function highlightTarget(target)
        if target and target.Character and target.Character:FindFirstChild(config.TargetPart) then
            local head = target.Character[config.TargetPart]
            head.BrickColor = BrickColor.new("Bright red")
            wait(0.1)
            head.BrickColor = BrickColor.new("White")
        end
    end

    while true do
        targetPlayer = nil
        local closestDistance = math.huge

        for _, playerInstance in pairs(game.Players:GetPlayers()) do
            if playerInstance ~= player and playerInstance.Character and playerInstance.Character:FindFirstChild(config.TargetPart) then
                local targetPos = playerInstance.Character[config.TargetPart].Position
                local screenPos = camera:WorldToScreenPoint(targetPos)

                local fovRadius = config.Fov / 2
                local distance = (targetPos - player.Character.Head.Position).magnitude
                if (Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2) - Vector2.new(screenPos.X, screenPos.Y)).magnitude < fovRadius and distance < closestDistance then
                    closestDistance = distance
                    targetPlayer = playerInstance
                end
            end
        end

        if targetPlayer then
            local aimPos = smoothAim(targetPlayer.Character[config.TargetPart].Position, camera.CFrame.Position)
            camera.CFrame = CFrame.new(camera.CFrame.Position, aimPos)

            local oldPos = camera.CFrame
            camera.CFrame = CFrame.new(camera.CFrame.Position, aimPos)
            autoShoot(targetPlayer.Character[config.TargetPart])
            highlightTarget(targetPlayer)
            camera.CFrame = oldPos
        end

        wait(0.01)
    end
end

-- Logs Tab
local MainLogs = MakeTab({Name = "Logs"})
AddParagraph(MainLogs, {"Made By RasyX"})
AddParagraph(MainLogs, {"[ FEATURES ] AimBot ( NEW ),"})
AddParagraph(MainLogs, {"21/09/2024", "Version 0.0.1"})
wait(1)
AddParagraph(MainLogs, {"There will probably be a script update, coming soon!! üëΩ"})

-- Start the loading sequence
LoadingSequence()
